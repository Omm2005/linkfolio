// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id String @id @default(cuid())

    // On page
    url             String?   @unique
    name            String?
    email           String?   @unique
    emailVerified   DateTime?
    designation     String?
    image           String?
    bio             String?
    backGroundImage String?

    // Connection
    accounts   Account[]
    sessions   Session[]
    createdAt  DateTime   @default(now())
    Links      Link[]
    Categories Category[]
    Socials    Socials[]
}

// Define the data model for links
model Link {
    id          String  @id @default(cuid())
    title       String
    url         String
    isPublished Boolean @default(false)
    order       Int     @default(autoincrement())

    // Many-to-one relationship with User
    user   User   @relation(fields: [userId], references: [id])
    userId String

    // One-to-many relationship with Category
    category   Category? @relation(fields: [categoryId], references: [id])
    categoryId String?
}

// Define the data model for categories
model Category {
    id    String @id @default(cuid())
    name  String @unique
    order Int    @default(autoincrement())

    // One-to-many relationship with Link
    links  Link[] // This field is optional depending on your application's needs
    user   User   @relation(fields: [userId], references: [id])
    userId String
}

model Socials {
    id String @id @default(cuid())

    // On page
    url String

    // Connection
    user   User   @relation(fields: [userId], references: [id])
    userId String
}
